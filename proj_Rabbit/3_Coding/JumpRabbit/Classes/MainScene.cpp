////  MainScene.cpp//  JumpRabbit////  Created by jihaitao on 14-8-29.////#include "MainScene.h"Scene* MainScene::createScene(){    auto scene = Scene::createWithPhysics();    scene->getPhysicsWorld()->setGravity(Vect(0,-1000));    auto layer = MainScene::create();    layer->setAccelerometerEnabled(true);    layer->setAccelerometerInterval(100);    scene->addChild(layer);    return scene;}bool MainScene::init(){    if (!Layer::init()) {        return false;    }    srand(time(NULL));        visibleSize = Director::getInstance()->getVisibleSize();        //添加背景    background=Sprite::create("game_back.png");    background->setAnchorPoint(Vec2::ANCHOR_MIDDLE);    background->setPosition(Vec2(visibleSize.width/2, visibleSize.height/2));    addChild(background);        addGameContainer();        //每间隔一秒增加一片云彩    schedule(schedule_selector(MainScene::addCloud), 6);        //延迟三秒钟添加兔子    scheduleOnce(schedule_selector(MainScene::addRabbit), 3);        addListener();        addTopBar();    addEdge();    return  true;}void MainScene::addRabbit(float dt){    rabbit  = Rabbit::create();    //设置初始向上的速度    rabbit->getPhysicsBody()->setVelocity(Vec2(0, 800));    gameContainer->addChild(rabbit);}void MainScene::addGameContainer(){    gameContainer = Sprite::create();    addChild(gameContainer);}void MainScene::addCloud(float dt){    Cloud* c;    switch (rand()%2) {        case 0:            c=LongCloud::create();            break;        case 1:            c=ShortCloud::create();            break;        default:            break;    }        //添加云彩    gameContainer->addChild(c);    Cloud::getClouds()->pushBack(c);        if (rabbit!=nullptr && rabbit->getPositionY()<-10) {        log("gameover");        gameOver();    }        //移除越界的云彩    removeOutBoundingCloud();}void MainScene::removeOutBoundingCloud(){    Vector<Cloud*> *clouds = Cloud::getClouds();    for (auto it = clouds->begin(); it!=clouds->end(); it++) {        if ((*it)->getPositionY()<-10) {            log(">>>>>>remove>>>>>>>>>>>");            (*it)->removeFromParent();            clouds->eraseObject(*it);        }    }}void MainScene::addTopBar(){    auto topbar = LayerColor::create(Color4B(255, 255, 255, 0), visibleSize.width,60);    topbar->ignoreAnchorPointForPosition(false);    topbar->setAnchorPoint(Point(0.5, 0));    topbar->setPosition(Point(visibleSize.width/2, visibleSize.height-60));    Size topbarSize = topbar->getContentSize();        //添加设置控件    auto pause = Label::create();    pause->setString("暂停");    pause->setSystemFontSize(24);    pause->setTextColor(Color4B::YELLOW);    Size pSize = pause->getContentSize();    pause->setPosition(Vec2(visibleSize.width-pSize.width/2-50,topbarSize.height/2));    topbar->addChild(pause);        //添加返回主菜单按钮    auto mainmenu = Label::create();    mainmenu->setString("主菜单");    mainmenu->setSystemFontSize(24);    mainmenu->setTextColor(Color4B::YELLOW);    Size mSize = mainmenu->getContentSize();    mainmenu->setPosition(Vec2(visibleSize.width-pSize.width/2-150,topbarSize.height/2));    topbar->addChild(mainmenu);        //添加积分标签    auto scoreLabel = Label::create();    scoreLabel->setString("得分");    scoreLabel->setSystemFontSize(18);    scoreLabel->setTextColor(Color4B::YELLOW);    Size slSize = mainmenu->getContentSize();    scoreLabel->setPosition(Vec2(slSize.width/2,topbarSize.height/2+10));    topbar->addChild(scoreLabel);        //添加积分控件    auto score = Label::create();    score->setString("1000");    score->setSystemFontSize(18);    score->setTextColor(Color4B::YELLOW);    Size sSize = mainmenu->getContentSize();    score->setPosition(Vec2(sSize.width/2,topbarSize.height/2-10));    topbar->addChild(score);        addChild(topbar);    }void MainScene::addListener(){        auto listener = EventListenerTouchOneByOne::create();        listener->onTouchBegan=[this](Touch* t,Event* e){        log("onTouchBegan");        return true;    };        listener->onTouchMoved=[this](Touch* t,Event* e){        if(rabbit != nullptr){            rabbit->setPositionX(t->getLocation().x);        }        log("onTouchMoved");    };        listener->onTouchEnded = [](Touch* t,Event* e){        log("onTouchEnded");    };        Director::getInstance()->getEventDispatcher()->addEventListenerWithSceneGraphPriority(listener, this);        auto contactListener = EventListenerPhysicsContact::create();    contactListener->onContactBegin = [this](PhysicsContact& contact){        log("onContactBegin");        auto sp1 = (Sprite*)contact.getShapeA()->getBody()->getNode();        auto sp2 = (Sprite*)contact.getShapeB()->getBody()->getNode();        Vector<Cloud*> *clouds = Cloud::getClouds();        if(sp1 == rabbit){            log("getShapeA = rabbit");            sp2->removeFromParent();            clouds->eraseObject((Cloud*)(sp2));        }else{            log("getShapeB = rabbit");            sp1->removeFromParent();            clouds->eraseObject((Cloud*)(sp1));        }                rabbit->getPhysicsBody()->setVelocity(Vec2(0, 900));        return true;    };    Director::getInstance()->getEventDispatcher()->addEventListenerWithSceneGraphPriority(contactListener, this);}void MainScene::gameOver(){    unscheduleUpdate();    Vector<Cloud*> *clouds = Cloud::getClouds();    for (auto it = clouds->begin(); it!=clouds->end(); it++) {        if ((*it)->getPositionY()<0) {            log(">>>>>>removeAll>>>>>>>>>>>");            (*it)->removeFromParent();            clouds->eraseObject(*it);        }    }    Director::getInstance()->replaceScene(GameOverScene::createScene());}void MainScene::addEdge(){        //左边界    auto ledge = Sprite::create();    ledge->setPhysicsBody(PhysicsBody::createEdgeSegment(Vec2(0, -visibleSize.height*2),                                                         Vec2(0, visibleSize.height*2)));    ledge->setPosition(Vec2(0,visibleSize.height/2));    addChild(ledge);        //右边界    auto redge = Sprite::create();    redge->setPhysicsBody(PhysicsBody::createEdgeSegment(Vec2(visibleSize.width, -visibleSize.height*2),                                                         Vec2(visibleSize.width, visibleSize.height*2)));    redge->setPosition(Vec2(visibleSize.width,visibleSize.height/2));    addChild(redge);}